// frontend/views/home.pug (최종 완성본 - JS 안정성 강화)

doctype html
html
  head
    meta(charset='utf-8')
    title 한입로그
    meta(name='viewport', content='width=device-width, initial-scale=1')
    link(rel='stylesheet', href='https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css')
    link(rel='stylesheet', href='/css/style.css')
  body
    #header-section.header.bg-light.mb-0
      .container
        h1: a(href='/', class='text-dark text-decoration-none') 한입로그🍽
        p.text-muted.mb-0 작은 한입에도 이야기가 담겨요 🍲

    #form-section.container.mb-5(style="display: none;")
      h3.mb-4.text-primary ✏️ 새 리뷰 작성
      form#new-review-form
        .form-group
          label(for='name') 이름
          input#name.form-control(type='text' name='name' placeholder='익명도 가능해요' required)
        .form-group
          label(for='store') 가게명
          input#store.form-control(type='text' name='store' placeholder='방문한 음식점 이름을 적어주세요' required)
        .form-group
          label(for='category') 음식 분류
          select#category.form-control(name='category' required)
            option(value='') -- 선택 --
            option(value='한식') 한식
            option(value='중식') 중식
            option(value='일식') 일식
            option(value='양식') 양식
            option(value='분식') 분식
            option(value='기타') 기타
        .form-group
          label(for='menu') 먹은 음식
          input#menu.form-control(type='text' name='menu' placeholder='예: 김치찌개, 크림파스타 등' required)
        .form-group
          label(for='taste') 맛 평점
          select#taste.form-control(name='taste' required)
            option(value='') -- 선택 --
            option(value='5') ★★★★★
            option(value='4') ★★★★☆
            option(value='3') ★★★☆☆
            option(value='2') ★★☆☆☆
            option(value='1') ★☆☆☆☆
        .form-group
          label 태그 (최소 1개 이상 선택)
          .tag-selector.border.p-3.rounded
            - const tags = [{emoji: '👥', label: '단체석'}, {emoji: '🪑', label: '입식'}, {emoji: '🧑‍🍳', label: '특별한메뉴'}, {emoji: '🛋️', label: '인테리어'}, {emoji: '🌿', label: '신선한'}, {emoji: '💕', label: '데이트'}, {emoji: '👀', label: '넓은'}, {emoji: '👥', label: '회식'}, {emoji: '🗣️', label: '대화'}, {emoji: '🍙', label: '혼밥'}, {emoji: '👨‍👩‍👧‍👦', label: '가족모임'}, {emoji: '✨', label: '분위기좋은'}, {emoji: '🆕', label: '새로오픈'}]
            each tag in tags
              .form-check.form-check-inline
                input.form-check-input(type='checkbox', name='tags', id=`tag-${tag.label}`, value=tag.label)
                label.form-check-label(for=`tag-${tag.label}`)= `${tag.emoji} ${tag.label}`
        .form-group
          label(for='memo') 추가 메모
          textarea#memo.form-control(name='memo' rows='4' placeholder='위생 상태, 위치, 걸리는 시간 등을 적어주세요')
        .form-group
          label(for='recommend') 추천 여부
          select#recommend.form-control(name='recommend' required)
            option(value='') -- 선택 --
            option(value='yes') 추천해요 👍
            option(value='no') 아쉬워요 👎
        button.btn.btn-success.btn-block(type='submit') 작성 완료
        button.btn.btn-secondary.btn-block(type='button')#hide-form-btn 취소

    #page-content
      .container.mb-5
        .d-flex.justify-content-between.align-items-center.mb-4
          div
            - const categories = ['전체', '한식', '중식', '일식', '양식', '분식', '기타']
            each cat in categories
              a(href=`/?category=${cat}`, class=`btn ${currentCategory === cat ? 'btn-primary' : 'btn-outline-secondary'} mr-2 mb-2`)= cat
          div
            button.btn.btn-primary.btn-sm#show-form-btn ✏️ 새 리뷰 작성
      .container-fluid.posts.mt-5
        include list.pug
  
  //- 🟢🟢🟢 여기가 수정된 스크립트입니다 🟢🟢🟢
  script.
    document.addEventListener('DOMContentLoaded', () => {
      // 모든 섹션과 버튼을 안전하게 선택합니다.
      const header = document.getElementById('header-section');
      const pageContent = document.getElementById('page-content');
      const formSection = document.getElementById('form-section');
      const showButton = document.getElementById('show-form-btn');
      const hideButton = document.getElementById('hide-form-btn');

      // 🟢 'showButton'이 실제로 존재하는지 확인합니다.
      if (!showButton) {
        console.error('Error: "show-form-btn"을 찾을 수 없습니다!');
        return; // 스크립트 실행 중단
      }
      // 🟢 'formSection' 등이 실제로 존재하는지 확인합니다.
      if (!formSection || !hideButton || !header || !pageContent) {
        console.error('Error: 페이지의 필수 구성요소(form, header 등)를 찾을 수 없습니다!');
        return; // 스크립트 실행 중단
      }

      function toggleSections(showForm) {
        if (showForm) {
          formSection.style.display = 'block';
          header.style.display = 'none';
          pageContent.style.display = 'none';
        } else {
          formSection.style.display = 'none';
          header.style.display = 'block';
          pageContent.style.display = 'block';
        }
      }
      function updateVisibility() {
        if (window.location.pathname === '/reviews/new') {
          toggleSections(true);
        } else {
          toggleSections(false);
        }
      }

      // 🟢 "버튼이 존재할 때만" 이벤트를 연결합니다.
      showButton.addEventListener('click', () => {
        history.pushState(null, '', '/reviews/new');
        updateVisibility();
      });

      // 🟢 "버튼이 존재할 때만" 이벤트를 연결합니다.
      hideButton.addEventListener('click', () => {
        history.pushState(null, '', '/');
        updateVisibility();
      });

      window.addEventListener('popstate', updateVisibility);
      updateVisibility();
    });
  script(src='/main.js')